// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["serde::Serialize", "serde::Deserialize"]
//   * generate_unused_types
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod colinrozzi {
    pub mod genai_types {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Tool = super::super::super::colinrozzi::mcp_protocol::types::Tool;
            pub type JsonData = super::super::super::colinrozzi::mcp_protocol::types::JsonData;
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolUse {
                pub id: _rt::String,
                pub name: _rt::String,
                pub input: JsonData,
            }
            impl ::core::fmt::Debug for ToolUse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolUse")
                        .field("id", &self.id)
                        .field("name", &self.name)
                        .field("input", &self.input)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolResult {
                pub tool_use_id: _rt::String,
                pub content: JsonData,
                pub is_error: bool,
            }
            impl ::core::fmt::Debug for ToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolResult")
                        .field("tool-use-id", &self.tool_use_id)
                        .field("content", &self.content)
                        .field("is-error", &self.is_error)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum MessageContent {
                Text(_rt::String),
                ToolUse(ToolUse),
                ToolResult(ToolResult),
            }
            impl ::core::fmt::Debug for MessageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageContent::Text(e) => {
                            f.debug_tuple("MessageContent::Text").field(e).finish()
                        }
                        MessageContent::ToolUse(e) => {
                            f.debug_tuple("MessageContent::ToolUse").field(e).finish()
                        }
                        MessageContent::ToolResult(e) => {
                            f.debug_tuple("MessageContent::ToolResult").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Message {
                pub role: MessageRole,
                pub content: _rt::Vec<MessageContent>,
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Message")
                        .field("role", &self.role)
                        .field("content", &self.content)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ToolChoice {
                Auto,
                Any,
                None,
                Specific(_rt::String),
            }
            impl ::core::fmt::Debug for ToolChoice {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ToolChoice::Auto => f.debug_tuple("ToolChoice::Auto").finish(),
                        ToolChoice::Any => f.debug_tuple("ToolChoice::Any").finish(),
                        ToolChoice::None => f.debug_tuple("ToolChoice::None").finish(),
                        ToolChoice::Specific(e) => {
                            f.debug_tuple("ToolChoice::Specific").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CompletionRequest {
                pub model: _rt::String,
                pub messages: _rt::Vec<Message>,
                pub max_tokens: u32,
                pub temperature: Option<f32>,
                pub system: Option<_rt::String>,
                pub tools: Option<_rt::Vec<Tool>>,
                pub tool_choice: Option<ToolChoice>,
                pub disable_parallel_tool_use: Option<bool>,
            }
            impl ::core::fmt::Debug for CompletionRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionRequest")
                        .field("model", &self.model)
                        .field("messages", &self.messages)
                        .field("max-tokens", &self.max_tokens)
                        .field("temperature", &self.temperature)
                        .field("system", &self.system)
                        .field("tools", &self.tools)
                        .field("tool-choice", &self.tool_choice)
                        .field(
                            "disable-parallel-tool-use",
                            &self.disable_parallel_tool_use,
                        )
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum StopReason {
                EndTurn,
                MaxTokens,
                StopSequence,
                ToolUse,
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for StopReason {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StopReason::EndTurn => {
                            f.debug_tuple("StopReason::EndTurn").finish()
                        }
                        StopReason::MaxTokens => {
                            f.debug_tuple("StopReason::MaxTokens").finish()
                        }
                        StopReason::StopSequence => {
                            f.debug_tuple("StopReason::StopSequence").finish()
                        }
                        StopReason::ToolUse => {
                            f.debug_tuple("StopReason::ToolUse").finish()
                        }
                        StopReason::Other(e) => {
                            f.debug_tuple("StopReason::Other").field(e).finish()
                        }
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct Usage {
                pub input_tokens: u32,
                pub output_tokens: u32,
            }
            impl ::core::fmt::Debug for Usage {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Usage")
                        .field("input-tokens", &self.input_tokens)
                        .field("output-tokens", &self.output_tokens)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CompletionResponse {
                pub content: _rt::Vec<MessageContent>,
                pub id: _rt::String,
                pub model: _rt::String,
                pub role: MessageRole,
                pub stop_reason: StopReason,
                pub usage: Usage,
            }
            impl ::core::fmt::Debug for CompletionResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionResponse")
                        .field("content", &self.content)
                        .field("id", &self.id)
                        .field("model", &self.model)
                        .field("role", &self.role)
                        .field("stop-reason", &self.stop_reason)
                        .field("usage", &self.usage)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ModelPricing {
                pub input_price: f64,
                pub output_price: f64,
            }
            impl ::core::fmt::Debug for ModelPricing {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelPricing")
                        .field("input-price", &self.input_price)
                        .field("output-price", &self.output_price)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ModelInfo {
                pub id: _rt::String,
                pub display_name: _rt::String,
                pub max_tokens: u32,
                pub provider: _rt::String,
                pub pricing: Option<ModelPricing>,
            }
            impl ::core::fmt::Debug for ModelInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelInfo")
                        .field("id", &self.id)
                        .field("display-name", &self.display_name)
                        .field("max-tokens", &self.max_tokens)
                        .field("provider", &self.provider)
                        .field("pricing", &self.pricing)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ProxyRequest {
                ListModels,
                GenerateCompletion(CompletionRequest),
            }
            impl ::core::fmt::Debug for ProxyRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProxyRequest::ListModels => {
                            f.debug_tuple("ProxyRequest::ListModels").finish()
                        }
                        ProxyRequest::GenerateCompletion(e) => {
                            f.debug_tuple("ProxyRequest::GenerateCompletion")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ProxyResponse {
                ListModels(_rt::Vec<ModelInfo>),
                Completion(CompletionResponse),
                Error(_rt::String),
            }
            impl ::core::fmt::Debug for ProxyResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProxyResponse::ListModels(e) => {
                            f.debug_tuple("ProxyResponse::ListModels").field(e).finish()
                        }
                        ProxyResponse::Completion(e) => {
                            f.debug_tuple("ProxyResponse::Completion").field(e).finish()
                        }
                        ProxyResponse::Error(e) => {
                            f.debug_tuple("ProxyResponse::Error").field(e).finish()
                        }
                    }
                }
            }
        }
    }
    pub mod mcp_protocol {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type JsonData = _rt::Vec<u8>;
            pub type ProgressToken = _rt::String;
            pub type Cursor = _rt::String;
            pub type RequestId = _rt::String;
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BaseMetadata {
                pub name: _rt::String,
                pub description: Option<_rt::String>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for BaseMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BaseMetadata")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct JsonrpcRequest {
                pub jsonrpc: _rt::String,
                pub method: _rt::String,
                pub params: Option<JsonData>,
                pub id: RequestId,
            }
            impl ::core::fmt::Debug for JsonrpcRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JsonrpcRequest")
                        .field("jsonrpc", &self.jsonrpc)
                        .field("method", &self.method)
                        .field("params", &self.params)
                        .field("id", &self.id)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct JsonrpcResponse {
                pub jsonrpc: _rt::String,
                pub id: RequestId,
                pub result: JsonData,
            }
            impl ::core::fmt::Debug for JsonrpcResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JsonrpcResponse")
                        .field("jsonrpc", &self.jsonrpc)
                        .field("id", &self.id)
                        .field("result", &self.result)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct JsonrpcNotification {
                pub jsonrpc: _rt::String,
                pub method: _rt::String,
                pub params: Option<JsonData>,
            }
            impl ::core::fmt::Debug for JsonrpcNotification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JsonrpcNotification")
                        .field("jsonrpc", &self.jsonrpc)
                        .field("method", &self.method)
                        .field("params", &self.params)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ErrorObject {
                pub code: i32,
                pub message: _rt::String,
                pub data: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ErrorObject {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ErrorObject")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct JsonrpcError {
                pub jsonrpc: _rt::String,
                pub id: RequestId,
                pub error: ErrorObject,
            }
            impl ::core::fmt::Debug for JsonrpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JsonrpcError")
                        .field("jsonrpc", &self.jsonrpc)
                        .field("id", &self.id)
                        .field("error", &self.error)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextContent {
                pub type_: _rt::String,
                pub text: _rt::String,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("type", &self.type_)
                        .field("text", &self.text)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImageContent {
                pub type_: _rt::String,
                pub data: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("type", &self.type_)
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AudioContent {
                pub type_: _rt::String,
                pub data: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("type", &self.type_)
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceContent {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub size: Option<u64>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ResourceContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceContent")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Tool {
                pub name: _rt::String,
                pub description: Option<_rt::String>,
                pub input_schema: JsonData,
                pub output_schema: Option<JsonData>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolCallParams {
                pub name: _rt::String,
                pub arguments: JsonData,
            }
            impl ::core::fmt::Debug for ToolCallParams {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolCallParams")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct McpResource {
                pub name: _rt::String,
                pub description: Option<_rt::String>,
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for McpResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpResource")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ContentItem {
                Text(Option<TextContent>),
                Image(Option<ImageContent>),
                Audio(Option<AudioContent>),
                Resource(Option<_rt::String>),
                EmbeddedResource(Option<McpResource>),
            }
            impl ::core::fmt::Debug for ContentItem {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentItem::Text(e) => {
                            f.debug_tuple("ContentItem::Text").field(e).finish()
                        }
                        ContentItem::Image(e) => {
                            f.debug_tuple("ContentItem::Image").field(e).finish()
                        }
                        ContentItem::Audio(e) => {
                            f.debug_tuple("ContentItem::Audio").field(e).finish()
                        }
                        ContentItem::Resource(e) => {
                            f.debug_tuple("ContentItem::Resource").field(e).finish()
                        }
                        ContentItem::EmbeddedResource(e) => {
                            f.debug_tuple("ContentItem::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolCallResult {
                pub content: _rt::Vec<ContentItem>,
                pub structured_content: Option<JsonData>,
                pub is_error: Option<bool>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ToolCallResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolCallResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct McpResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub content: ContentItem,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for McpResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("content", &self.content)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct PaginatedResult {
                pub next_cursor: Option<Cursor>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for PaginatedResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PaginatedResult")
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsResult {
                pub tools: _rt::Vec<Tool>,
                pub next_cursor: Option<Cursor>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ListToolsResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResult")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListResourcesResult {
                pub resources: _rt::Vec<McpResource>,
                pub next_cursor: Option<Cursor>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ListResourcesResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListResourcesResult")
                        .field("resources", &self.resources)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct PaginatedRequest {
                pub cursor: Option<Cursor>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for PaginatedRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PaginatedRequest")
                        .field("cursor", &self.cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod theater {
    pub mod simple {
        /// # Common Type Definitions
        ///
        /// Defines shared types used across multiple interfaces in the Theater system.
        /// This interface serves as a central location for type definitions to ensure
        /// consistency and avoid duplication.
        ///
        /// ## Purpose
        ///
        /// The types interface provides common data structures and type aliases used
        /// throughout the Theater system. These types represent core concepts such as:
        ///
        /// - Message formats
        /// - Event chain structures
        /// - Identifiers
        ///
        /// By centralizing these definitions, the system maintains type consistency
        /// across different interfaces and components.
        ///
        /// ## Example
        ///
        /// These types are typically imported and used in actor implementations:
        ///
        /// ```rust
        /// use ntwk::theater::types::actor_id;
        ///
        /// // Using actor-id for referring to actors
        /// fn get_actor_info(id: actor_id) -> String {
        /// format!("Info for actor {}", id)
        /// }
        /// ```
        ///
        /// ## Implementation Notes
        ///
        /// - Most types are designed to be serialization-format agnostic
        /// - The `list<u8>` (byte array) representation allows for flexible serialization
        /// - Actors typically use serde-compatible formats for serialization/deserialization
        /// Define a shared type for messages
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Unique identifier for an actor
            ///
            /// Actors are identified by string identifiers throughout the system. These
            /// identifiers are typically UUIDs or other unique strings.
            pub type ActorId = _rt::String;
            /// Unique identifier for a channel
            ///
            /// Channels are communication pathways between actors or between actors and
            /// external systems. They are identified by string identifiers.
            pub type ChannelId = _rt::String;
            /// Response to a channel connection request
            ///
            /// When an actor is asked to accept a channel connection, it responds with
            /// this structure to indicate acceptance and provide an optional initial message.
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ChannelAccept {
                /// Whether the channel connection was accepted
                pub accepted: bool,
                /// Optional initial message to send on the channel
                pub message: Option<_rt::Vec<u8>>,
            }
            impl ::core::fmt::Debug for ChannelAccept {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChannelAccept")
                        .field("accepted", &self.accepted)
                        .field("message", &self.message)
                        .finish()
                }
            }
            /// Core event structure
            ///
            /// Represents a single event in an actor's history, including its type,
            /// parent reference, and associated data.
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Event {
                /// Type of event (e.g., "http", "message", "wasm")
                pub event_type: _rt::String,
                /// Optional reference to parent event (previous in chain)
                pub parent: Option<u64>,
                /// Serialized event data
                pub data: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Event")
                        .field("event-type", &self.event_type)
                        .field("parent", &self.parent)
                        .field("data", &self.data)
                        .finish()
                }
            }
            /// Event with associated metadata
            ///
            /// Represents a single event in the chain with its metadata (hash),
            /// allowing for verification and referencing.
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct MetaEvent {
                /// Hash of the event, used for verification and referencing
                pub hash: u64,
                /// The actual event data
                pub event: Event,
            }
            impl ::core::fmt::Debug for MetaEvent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("MetaEvent")
                        .field("hash", &self.hash)
                        .field("event", &self.event)
                        .finish()
                }
            }
            /// Complete event chain for an actor
            ///
            /// Represents the full history of events that have occurred in an actor,
            /// providing traceability and auditability.
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Chain {
                /// List of events in the chain, each with metadata
                pub events: _rt::Vec<MetaEvent>,
            }
            impl ::core::fmt::Debug for Chain {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Chain").field("events", &self.events).finish()
                }
            }
            /// # Event in a chain
            ///
            /// Represents a single event in an actor's chain (audit log).
            ///
            /// ## Fields
            ///
            /// * `hash` - Unique identifier/hash for this event
            /// * `parent-hash` - Hash of the previous event in the chain (None for first event)
            /// * `event-type` - Type of event (e.g., "wasm", "http", "message")
            /// * `data` - Serialized event data
            /// * `timestamp` - Timestamp when the event occurred (milliseconds since epoch)
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ChainEvent {
                pub hash: _rt::Vec<u8>,
                pub parent_hash: Option<_rt::Vec<u8>>,
                pub event_type: _rt::String,
                pub data: _rt::Vec<u8>,
                pub timestamp: u64,
            }
            impl ::core::fmt::Debug for ChainEvent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChainEvent")
                        .field("hash", &self.hash)
                        .field("parent-hash", &self.parent_hash)
                        .field("event-type", &self.event_type)
                        .field("data", &self.data)
                        .field("timestamp", &self.timestamp)
                        .finish()
                }
            }
            /// Actor error
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum WitErrorType {
                OperationTimeout,
                ChannelClosed,
                ShuttingDown,
                FunctionNotFound,
                TypeMismatch,
                Internal,
                SerializationError,
                UpdateComponentError,
                Paused,
            }
            impl ::core::fmt::Debug for WitErrorType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitErrorType::OperationTimeout => {
                            f.debug_tuple("WitErrorType::OperationTimeout").finish()
                        }
                        WitErrorType::ChannelClosed => {
                            f.debug_tuple("WitErrorType::ChannelClosed").finish()
                        }
                        WitErrorType::ShuttingDown => {
                            f.debug_tuple("WitErrorType::ShuttingDown").finish()
                        }
                        WitErrorType::FunctionNotFound => {
                            f.debug_tuple("WitErrorType::FunctionNotFound").finish()
                        }
                        WitErrorType::TypeMismatch => {
                            f.debug_tuple("WitErrorType::TypeMismatch").finish()
                        }
                        WitErrorType::Internal => {
                            f.debug_tuple("WitErrorType::Internal").finish()
                        }
                        WitErrorType::SerializationError => {
                            f.debug_tuple("WitErrorType::SerializationError").finish()
                        }
                        WitErrorType::UpdateComponentError => {
                            f.debug_tuple("WitErrorType::UpdateComponentError").finish()
                        }
                        WitErrorType::Paused => {
                            f.debug_tuple("WitErrorType::Paused").finish()
                        }
                    }
                }
            }
            impl WitErrorType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WitErrorType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => WitErrorType::OperationTimeout,
                        1 => WitErrorType::ChannelClosed,
                        2 => WitErrorType::ShuttingDown,
                        3 => WitErrorType::FunctionNotFound,
                        4 => WitErrorType::TypeMismatch,
                        5 => WitErrorType::Internal,
                        6 => WitErrorType::SerializationError,
                        7 => WitErrorType::UpdateComponentError,
                        8 => WitErrorType::Paused,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct WitActorError {
                pub error_type: WitErrorType,
                pub data: Option<_rt::Vec<u8>>,
            }
            impl ::core::fmt::Debug for WitActorError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitActorError")
                        .field("error-type", &self.error_type)
                        .field("data", &self.data)
                        .finish()
                }
            }
        }
        /// # Runtime Interface
        ///
        /// The `runtime` interface provides core runtime capabilities to actors in the Theater system.
        /// It allows actors to access their environment, log messages, and retrieve their event chain.
        ///
        /// ## Purpose
        ///
        /// This interface serves as a bridge between the actor and its execution environment,
        /// providing essential services for operation, debugging, and state management. It enables
        /// actors to log information to the system and access their immutable event history.
        ///
        /// ## Example
        ///
        /// ```wit
        /// // Using the runtime interface in a WIT definition
        /// use theater:simple/runtime;
        ///
        /// // Using the runtime interface in a Rust implementation
        /// runtime::log("Actor initialized successfully");
        /// let my_chain = runtime::get_chain();
        /// ```
        ///
        /// ## Security
        ///
        /// The runtime interface is designed to be safe to expose to all actors, as it provides
        /// only read access to state and controlled logging functionality. It doesn't allow actors
        /// to modify runtime state or access system resources outside their sandbox.
        ///
        /// ## Implementation Notes
        ///
        /// This interface is typically implemented by the Theater runtime and automatically
        /// provided to all actors. No special configuration is required to use it, though
        /// logging behavior can be controlled through manifest settings.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod runtime {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Chain = super::super::super::theater::simple::types::Chain;
            pub type ActorId = super::super::super::theater::simple::types::ActorId;
            #[allow(unused_unsafe, clippy::all)]
            /// Logs a message to the actor's log stream.
            ///
            /// ## Purpose
            ///
            /// This function allows actors to send log messages to the Theater logging system.
            /// Messages are tagged with the actor's ID and can be viewed through the Theater CLI
            /// or event subscription system.
            ///
            /// ## Parameters
            ///
            /// * `msg` - The message to log
            ///
            /// ## Example
            ///
            /// ```rust
            /// // In Rust actor code
            /// runtime::log("Processing request with ID: 12345");
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// Log messages are subject to the logging level configuration specified in the actor's
            /// manifest. The Theater runtime may filter or redirect logs based on this configuration.
            pub fn log(msg: &str) -> () {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/runtime")]
                    unsafe extern "C" {
                        #[link_name = "log"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Retrieves the actor's event chain.
            ///
            /// ## Purpose
            ///
            /// This function provides access to the actor's complete event history as a chain of
            /// cryptographically linked events. This allows actors to inspect their state evolution
            /// and verify the integrity of their history.
            ///
            /// ## Returns
            ///
            /// * `chain` - The actor's event chain containing all recorded events
            ///
            /// ## Example
            ///
            /// ```rust
            /// // In Rust actor code
            /// let chain = runtime::get_chain();
            ///
            /// // Count events by type
            /// let mut event_counts = std::collections::HashMap::new();
            /// for event in chain.events {
            /// *event_counts.entry(event.event_type.clone()).or_insert(0) += 1;
            /// }
            /// ```
            ///
            /// ## Security
            ///
            /// The event chain is immutable and cryptographically verifiable, ensuring that actors
            /// cannot tamper with their event history. This provides a secure audit trail of all
            /// actor actions.
            pub fn get_chain() -> Chain {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/runtime")]
                    unsafe extern "C" {
                        #[link_name = "get-chain"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base13 = l2;
                    let len13 = l3;
                    let mut result13 = _rt::Vec::with_capacity(len13);
                    for i in 0..len13 {
                        let base = base13
                            .add(i * (24 + 4 * ::core::mem::size_of::<*const u8>()));
                        let e13 = {
                            let l4 = *base.add(0).cast::<i64>();
                            let l5 = *base.add(8).cast::<*mut u8>();
                            let l6 = *base
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = i32::from(
                                *base
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l10 = *base
                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l11 = *base
                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len12 = l11;
                            super::super::super::theater::simple::types::MetaEvent {
                                hash: l4 as u64,
                                event: super::super::super::theater::simple::types::Event {
                                    event_type: _rt::string_lift(bytes7),
                                    parent: match l8 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l9 = *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>();
                                                l9 as u64
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    data: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                                },
                            }
                        };
                        result13.push(e13);
                    }
                    _rt::cabi_dealloc(
                        base13,
                        len13 * (24 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result14 = super::super::super::theater::simple::types::Chain {
                        events: result13,
                    };
                    result14
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn shutdown(data: Option<&[u8]>) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let (result1_0, result1_1, result1_2) = match data {
                        Some(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (1i32, ptr0.cast_mut(), len0)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/runtime")]
                    unsafe extern "C" {
                        #[link_name = "shutdown"]
                        fn wit_import3(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import3(result1_0, result1_1, result1_2, ptr2) };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result8 = match l4 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod environment {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// Get a specific environment variable
            /// Returns None if the variable doesn't exist or access is denied
            pub fn get_var(name: &str) -> Option<_rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/environment")]
                    unsafe extern "C" {
                        #[link_name = "get-var"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// List all accessible environment variables
            /// Returns empty list if list_all is not enabled in config
            pub fn list_vars() -> _rt::Vec<(_rt::String, _rt::String)> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/environment")]
                    unsafe extern "C" {
                        #[link_name = "list-vars"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base10 = l2;
                    let len10 = l3;
                    let mut result10 = _rt::Vec::with_capacity(len10);
                    for i in 0..len10 {
                        let base = base10
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e10 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            let l7 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l8 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len9 = l8;
                            let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                            (_rt::string_lift(bytes6), _rt::string_lift(bytes9))
                        };
                        result10.push(e10);
                    }
                    _rt::cabi_dealloc(
                        base10,
                        len10 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result11 = result10;
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Check if a specific environment variable exists (and is accessible)
            pub fn exists(name: &str) -> bool {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/environment")]
                    unsafe extern "C" {
                        #[link_name = "exists"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    _rt::bool_lift(ret as u8)
                }
            }
        }
        /// # Timing Interface
        ///
        /// Provides time-related functions for actors to get the current time and control execution timing.
        ///
        /// ## Purpose
        ///
        /// The timing interface gives actors access to time information and timing control
        /// within the Theater runtime. It allows actors to:
        /// - Get the current time
        /// - Pause execution for specific durations
        /// - Delay execution until specific points in time
        ///
        /// ## Example
        ///
        /// ```rust
        /// use ntwk::theater::timing;
        ///
        /// async fn example() -> Result<(), String> {
        /// // Get the current time
        /// let now = timing::now();
        /// println!("Current time: {}", now);
        ///
        /// // Sleep for 500 milliseconds
        /// timing::sleep(500)?;
        ///
        /// // Wait until a specific future time
        /// let five_seconds_later = now + 5000;
        /// timing::deadline(five_seconds_later)?;
        ///
        /// Ok(())
        /// }
        /// ```
        ///
        /// ## Security
        ///
        /// The timing operations are managed by the Theater runtime, which may enforce:
        /// - Rate limits on sleep operations to prevent resource exhaustion
        /// - Maximum duration limits to prevent indefinite blocking
        /// - Tracking and reporting of sleep patterns in the event chain
        ///
        /// ## Implementation Notes
        ///
        /// When actors call timing functions, the WebAssembly execution is suspended without
        /// blocking the entire runtime. This allows the runtime to continue processing other
        /// actors while an actor is waiting.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod timing {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// # Get current time
            ///
            /// Returns the current time in milliseconds since the UNIX epoch (January 1, 1970 UTC).
            ///
            /// ## Returns
            ///
            /// The current timestamp in milliseconds
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::timing;
            ///
            /// // Get current timestamp
            /// let now = timing::now();
            ///
            /// // Convert to seconds
            /// let seconds_since_epoch = now / 1000;
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// The time value is consistent across the entire Theater runtime, ensuring that
            /// all actors have a synchronized view of time.
            pub fn now() -> u64 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/timing")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Pause execution
            ///
            /// Pauses the execution of the actor for the specified number of milliseconds.
            ///
            /// ## Parameters
            ///
            /// * `duration` - Number of milliseconds to sleep
            ///
            /// ## Returns
            ///
            /// * `Ok(_)` - Sleep completed successfully
            /// * `Err(string)` - Error message if sleep was interrupted or not allowed
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::timing;
            ///
            /// // Sleep for 1 second
            /// timing::sleep(1000)?;
            ///
            /// // Sleep for 100ms
            /// timing::sleep(100)?;
            /// ```
            ///
            /// ## Security
            ///
            /// The runtime may enforce limits on how long an actor can sleep to prevent
            /// resource exhaustion or denial of service. Sleep operations are recorded
            /// in the actor's event chain.
            pub fn sleep(duration: u64) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/timing")]
                    unsafe extern "C" {
                        #[link_name = "sleep"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(&duration), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Wait until specific time
            ///
            /// Pauses execution until the specified timestamp is reached.
            ///
            /// ## Parameters
            ///
            /// * `timestamp` - Target time in milliseconds since UNIX epoch
            ///
            /// ## Returns
            ///
            /// * `Ok(_)` - Deadline was reached successfully
            /// * `Err(string)` - Error message if the wait was interrupted or not allowed
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::timing;
            ///
            /// // Wait until a specific time
            /// let target_time = 1672531200000; // Jan 1, 2023 00:00:00 UTC
            /// timing::deadline(target_time)?;
            ///
            /// // Wait until 10 seconds from now
            /// let now = timing::now();
            /// let ten_seconds_later = now + 10000;
            /// timing::deadline(ten_seconds_later)?;
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// - If the specified timestamp is in the past, the function returns immediately
            /// - The runtime may reject excessive deadline values that are too far in the future
            /// - Deadline operations are recorded in the actor's event chain
            pub fn deadline(timestamp: u64) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/timing")]
                    unsafe extern "C" {
                        #[link_name = "deadline"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(&timestamp), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod http_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Raw binary data type
            pub type Bytes = _rt::Vec<u8>;
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct HttpRequest {
                /// HTTP method (GET, POST, PUT, DELETE, etc.)
                pub method: _rt::String,
                /// Full request URI including query parameters
                pub uri: _rt::String,
                /// List of request headers as key-value pairs
                pub headers: _rt::Vec<(_rt::String, _rt::String)>,
                /// Optional request body as binary data
                pub body: Option<Bytes>,
            }
            impl ::core::fmt::Debug for HttpRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("HttpRequest")
                        .field("method", &self.method)
                        .field("uri", &self.uri)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct HttpResponse {
                /// HTTP status code (e.g., 200, 404, 500)
                pub status: u16,
                /// List of response headers as key-value pairs
                pub headers: _rt::Vec<(_rt::String, _rt::String)>,
                /// Optional response body as binary data
                pub body: Option<Bytes>,
            }
            impl ::core::fmt::Debug for HttpResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("HttpResponse")
                        .field("status", &self.status)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TlsConfig {
                /// Path to the certificate file
                pub cert_path: _rt::String,
                /// Path to the key file
                pub key_path: _rt::String,
            }
            impl ::core::fmt::Debug for TlsConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TlsConfig")
                        .field("cert-path", &self.cert_path)
                        .field("key-path", &self.key_path)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ServerConfig {
                /// Port to listen on, 0 means system-assigned
                pub port: Option<u16>,
                /// Host address to bind to
                pub host: Option<_rt::String>,
                /// TLS configuration for HTTPS
                pub tls_config: Option<TlsConfig>,
            }
            impl ::core::fmt::Debug for ServerConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerConfig")
                        .field("port", &self.port)
                        .field("host", &self.host)
                        .field("tls-config", &self.tls_config)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ServerInfo {
                /// Server ID
                pub id: u64,
                /// Current listening port
                pub port: u16,
                /// Host address
                pub host: _rt::String,
                /// Whether the server is running
                pub running: bool,
                /// Number of active routes
                pub routes_count: u32,
                /// Number of active middleware
                pub middleware_count: u32,
                /// Whether WebSocket is enabled
                pub websocket_enabled: bool,
            }
            impl ::core::fmt::Debug for ServerInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerInfo")
                        .field("id", &self.id)
                        .field("port", &self.port)
                        .field("host", &self.host)
                        .field("running", &self.running)
                        .field("routes-count", &self.routes_count)
                        .field("middleware-count", &self.middleware_count)
                        .field("websocket-enabled", &self.websocket_enabled)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct MiddlewareResult {
                /// Whether to continue processing the request
                pub proceed: bool,
                /// The potentially modified request
                pub request: HttpRequest,
            }
            impl ::core::fmt::Debug for MiddlewareResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("MiddlewareResult")
                        .field("proceed", &self.proceed)
                        .field("request", &self.request)
                        .finish()
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod http_client {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type HttpRequest = super::super::super::theater::simple::http_types::HttpRequest;
            pub type HttpResponse = super::super::super::theater::simple::http_types::HttpResponse;
            #[allow(unused_unsafe, clippy::all)]
            pub fn send_http(req: &HttpRequest) -> Result<HttpResponse, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 7 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 7
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::theater::simple::http_types::HttpRequest {
                        method: method0,
                        uri: uri0,
                        headers: headers0,
                        body: body0,
                    } = req;
                    let vec1 = method0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = uri0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec6 = headers0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t3_0, t3_1) = e;
                            let vec4 = t3_0;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = t3_1;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    let (result8_0, result8_1, result8_2) = match body0 {
                        Some(e) => {
                            let vec7 = e;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            (1i32, ptr7.cast_mut(), len7)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr9 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-client")]
                    unsafe extern "C" {
                        #[link_name = "send-http"]
                        fn wit_import10(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import10(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import10(
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result6,
                            len6,
                            result8_0,
                            result8_1,
                            result8_2,
                            ptr9,
                        )
                    };
                    let l11 = i32::from(*ptr9.add(0).cast::<u8>());
                    let result29 = match l11 {
                        0 => {
                            let e = {
                                let l12 = i32::from(
                                    *ptr9.add(::core::mem::size_of::<*const u8>()).cast::<u16>(),
                                );
                                let l13 = *ptr9
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr9
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base21 = l13;
                                let len21 = l14;
                                let mut result21 = _rt::Vec::with_capacity(len21);
                                for i in 0..len21 {
                                    let base = base21
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e21 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l19 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len20 = l19;
                                        let bytes20 = _rt::Vec::from_raw_parts(
                                            l18.cast(),
                                            len20,
                                            len20,
                                        );
                                        (_rt::string_lift(bytes17), _rt::string_lift(bytes20))
                                    };
                                    result21.push(e21);
                                }
                                _rt::cabi_dealloc(
                                    base21,
                                    len21 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l22 = i32::from(
                                    *ptr9
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::theater::simple::http_types::HttpResponse {
                                    status: l12 as u16,
                                    headers: result21,
                                    body: match l22 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l23 = *ptr9
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l24 = *ptr9
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len25 = l24;
                                                _rt::Vec::from_raw_parts(l23.cast(), len25, len25)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l26 = *ptr9
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l27 = *ptr9
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len28 = l27;
                                let bytes28 = _rt::Vec::from_raw_parts(
                                    l26.cast(),
                                    len28,
                                    len28,
                                );
                                _rt::string_lift(bytes28)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                    result29
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod theater {
        pub mod simple {
            /// # Message Server Client Interface
            ///
            /// Defines the callback handlers that actors must implement to receive messages through
            /// the message server system.
            ///
            /// ## Purpose
            ///
            /// This interface enables actors to receive and process various types of messages:
            /// - One-way messages (send)
            /// - Request-response interactions (request)
            /// - Bidirectional channel-based communication (channel operations)
            ///
            /// By implementing these handler functions, an actor can participate in different
            /// communication patterns with other actors and external systems.
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_client::Guest;
            /// use ntwk::theater::types::{channel_accept, channel_id};
            /// use serde_json::{json, Value};
            ///
            /// struct MyMessageHandler;
            ///
            /// impl Guest for MyMessageHandler {
            /// fn handle_send(state: Option<Value>, params: (Value,))
            /// -> Result<(Option<Value>,), String> {
            /// let (message,) = params;
            /// println!("Received message: {}", message);
            ///
            /// // Update state if needed
            /// let new_state = if let Some(mut state) = state {
            /// state["message_count"] = json!(state["message_count"].as_u64().unwrap_or(0) + 1);
            /// Some(state)
            /// } else {
            /// Some(json!({"message_count": 1}))
            /// };
            ///
            /// Ok((new_state,))
            /// }
            ///
            /// // Implement other handlers...
            /// }
            /// ```
            ///
            /// ## Security
            ///
            /// The message handlers receive input from potentially untrusted sources, so they should:
            /// - Validate all incoming message data
            /// - Handle malformed messages gracefully
            /// - Protect against common attack vectors like JSON injection
            ///
            /// ## Implementation Notes
            ///
            /// - All handlers receive and can update the actor's state
            /// - Errors returned from handlers are logged and may trigger supervision
            /// - Handler execution is tracked in the actor's event chain
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod message_server_client {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Event = super::super::super::super::theater::simple::types::Event;
                pub type ChannelId = super::super::super::super::theater::simple::types::ChannelId;
                pub type ChannelAccept = super::super::super::super::theater::simple::types::ChannelAccept;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_send_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let result2 = T::handle_send(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (_rt::Vec::from_raw_parts(arg3.cast(), len1, len1),),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_send<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_request_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let result3 = T::handle_request(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            _rt::string_lift(bytes1),
                            _rt::Vec::from_raw_parts(arg5.cast(), len2, len2),
                        ),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let (t5_0, t5_1) = e;
                            match t5_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let (t7_0,) = t5_1;
                            match t7_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr4
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr4
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec9 = (e.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr9.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_request<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                            let l5 = i32::from(
                                *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base8 = l6;
                                    let len8 = l7;
                                    _rt::cabi_dealloc(base8, len8 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l9 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l9, l10, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_channel_open_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let result3 = T::handle_channel_open(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            _rt::string_lift(bytes1),
                            _rt::Vec::from_raw_parts(arg5.cast(), len2, len2),
                        ),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let (t5_0, t5_1) = e;
                            match t5_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let (t7_0,) = t5_1;
                            let super::super::super::super::theater::simple::types::ChannelAccept {
                                accepted: accepted8,
                                message: message8,
                            } = t7_0;
                            *ptr4
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match accepted8 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            match message8 {
                                Some(e) => {
                                    *ptr4
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec9 = (e).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr4
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr4
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec10 = (e.into_bytes()).into_boxed_slice();
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            ::core::mem::forget(vec10);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len10;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr10.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_channel_open<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                            let l5 = i32::from(
                                *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base8 = l6;
                                    let len8 = l7;
                                    _rt::cabi_dealloc(base8, len8 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l9 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l9, l10, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_channel_message_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let result3 = T::handle_channel_message(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            _rt::string_lift(bytes1),
                            _rt::Vec::from_raw_parts(arg5.cast(), len2, len2),
                        ),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let (t5_0,) = e;
                            match t5_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_channel_message<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_channel_close_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::handle_channel_close(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (_rt::string_lift(bytes1),),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_channel_close<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// # Handle one-way message
                    ///
                    /// Processes a one-way message that doesn't require a response.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `json` - The message payload
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>,))` - Updated actor state (or None to retain current state)
                    /// * `Err(string)` - Error message if message handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_send(state: Option<Value>, params: (Value,)) -> Result<(Option<Value>,), String> {
                    /// let (message,) = params;
                    ///
                    /// // Process the message...
                    ///
                    /// // Return updated state (or None to keep current state)
                    /// Ok((Some(updated_state),))
                    /// }
                    /// ```
                    fn handle_send(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::Vec<u8>,),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                    /// # Handle request-response message
                    ///
                    /// Processes a request that requires a response.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `string` - The request ID
                    /// * `json` - The request payload
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>, (option<list<u8>>,)))` - Tuple containing:
                    /// * Updated actor state (or None)
                    /// * Response message to send back (or None to send a response yet)
                    /// * `Err(string)` - Error message if request handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_request(state: Option<Vec<u8>>, params: (String, Vec<u8>))
                    /// -> Result<(Option<Vec<u8>>, (Option<Vec<u8>>,)), String> {
                    /// let (request_id, request) = params;
                    ///
                    /// // Process the request...
                    /// let response = json!({"status": "success", "data": "result"});
                    ///
                    /// // Return updated state and response
                    /// Ok((Some(updated_state), (Some(response),)))
                    /// }
                    /// ```
                    fn handle_request(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String, _rt::Vec<u8>),
                    ) -> Result<
                        (Option<_rt::Vec<u8>>, (Option<_rt::Vec<u8>>,)),
                        _rt::String,
                    >;
                    /// # Handle channel open request
                    ///
                    /// Called when another actor requests to open a communication channel.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `json` - The initial message payload
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>, (channel-accept,)))` - Tuple containing:
                    /// * Updated actor state (or None to retain current state)
                    /// * Channel acceptance decision
                    /// * `Err(string)` - Error message if open handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_channel_open(state: Option<Value>, params: (Value,))
                    /// -> Result<(Option<Value>, (channel_accept,)), String> {
                    /// let (initial_message,) = params;
                    ///
                    /// // Decide whether to accept the channel
                    /// let accept = channel_accept {
                    /// accept: true,
                    /// error_message: None,
                    /// };
                    ///
                    /// // Return updated state and acceptance decision
                    /// Ok((Some(updated_state), (accept,)))
                    /// }
                    /// ```
                    ///
                    /// ## Security
                    ///
                    /// The actor should validate the channel request and only accept channels from
                    /// trusted sources. The acceptance mechanism provides a security checkpoint.
                    fn handle_channel_open(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String, _rt::Vec<u8>),
                    ) -> Result<(Option<_rt::Vec<u8>>, (ChannelAccept,)), _rt::String>;
                    /// # Handle channel message
                    ///
                    /// Processes a message received on an established channel.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `channel-id` - ID of the channel the message was received on
                    /// * `json` - The message payload
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>,))` - Updated actor state (or None to retain current state)
                    /// * `Err(string)` - Error message if message handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_channel_message(state: Option<Value>, params: (channel_id, Value))
                    /// -> Result<(Option<Value>,), String> {
                    /// let (channel_id, message) = params;
                    ///
                    /// // Process the channel message...
                    /// println!("Received message on channel {}: {}", channel_id, message);
                    ///
                    /// // Return updated state (or None to keep current state)
                    /// Ok((Some(updated_state),))
                    /// }
                    /// ```
                    fn handle_channel_message(
                        state: Option<_rt::Vec<u8>>,
                        params: (ChannelId, _rt::Vec<u8>),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                    /// # Handle channel close
                    ///
                    /// Called when a communication channel is closed.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `channel-id` - ID of the channel that was closed
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>,))` - Updated actor state (or None to retain current state)
                    /// * `Err(string)` - Error message if close handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_channel_close(state: Option<Value>, params: (channel_id,))
                    /// -> Result<(Option<Value>,), String> {
                    /// let (channel_id,) = params;
                    ///
                    /// // Clean up any resources associated with the channel
                    /// println!("Channel {} closed", channel_id);
                    ///
                    /// // Return updated state (or None to keep current state)
                    /// Ok((Some(updated_state),))
                    /// }
                    /// ```
                    ///
                    /// ## Implementation Notes
                    ///
                    /// This function should perform any necessary cleanup for the closed channel,
                    /// such as releasing resources or updating internal state to reflect the channel closure.
                    fn handle_channel_close(
                        state: Option<_rt::Vec<u8>>,
                        params: (ChannelId,),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_theater_simple_message_server_client_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "theater:simple/message-server-client#handle-send")] unsafe
                        extern "C" fn export_handle_send(arg0 : i32, arg1 : * mut u8,
                        arg2 : usize, arg3 : * mut u8, arg4 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_handle_send_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-send")]
                        unsafe extern "C" fn _post_return_handle_send(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_handle_send::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "theater:simple/message-server-client#handle-request")] unsafe
                        extern "C" fn export_handle_request(arg0 : i32, arg1 : * mut u8,
                        arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 : * mut u8,
                        arg6 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_request_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-request")]
                        unsafe extern "C" fn _post_return_handle_request(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_request::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "theater:simple/message-server-client#handle-channel-open")]
                        unsafe extern "C" fn export_handle_channel_open(arg0 : i32, arg1
                        : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 : *
                        mut u8, arg6 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_channel_open_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6) } } #[unsafe
                        (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-channel-open")]
                        unsafe extern "C" fn _post_return_handle_channel_open(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_channel_open::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "theater:simple/message-server-client#handle-channel-message")]
                        unsafe extern "C" fn export_handle_channel_message(arg0 : i32,
                        arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_channel_message_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6) } } #[unsafe
                        (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-channel-message")]
                        unsafe extern "C" fn _post_return_handle_channel_message(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_channel_message::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "theater:simple/message-server-client#handle-channel-close")]
                        unsafe extern "C" fn export_handle_channel_close(arg0 : i32, arg1
                        : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,) -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_channel_close_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-channel-close")]
                        unsafe extern "C" fn _post_return_handle_channel_close(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_channel_close::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_theater_simple_message_server_client_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 8 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// # Actor Interface
            ///
            /// Defines the core interface that all Theater actors must implement. This is the
            /// fundamental contract between the Theater runtime and WebAssembly actor components.
            ///
            /// ## Purpose
            ///
            /// The actor interface establishes the minimal required functionality for a component
            /// to be recognized and managed as a Theater actor. By implementing this interface,
            /// a WebAssembly component can be:
            ///
            /// - Loaded by the Theater runtime
            /// - Initialized with state and parameters
            /// - Managed within the supervision hierarchy
            /// - Integrated with the event chain system
            ///
            /// This interface is deliberately minimal to make it as easy as possible to create
            /// compatible actors, while still providing the core functionality needed for the
            /// Theater system to manage them.
            ///
            /// ## Example
            ///
            /// Here's how a typical actor would implement this interface in Rust:
            ///
            /// ```rust
            /// use ntwk::theater::actor::Guest;
            /// use ntwk::theater::types::State;
            ///
            /// struct MyActor;
            ///
            /// impl Guest for MyActor {
            /// fn init(state: State, params: (String,)) -> Result<(State,), String> {
            /// // Parse the initial parameters
            /// let (actor_id,) = params;
            /// println!("Initializing actor with ID: {}", actor_id);
            ///
            /// // Create initial state if none exists
            /// let new_state = match state {
            /// Some(existing) => {
            /// // Use existing state
            /// existing
            /// }
            /// None => {
            /// // Create new initial state
            /// let initial_data = MyActorState {
            /// counter: 0,
            /// last_updated: chrono::Utc::now(),
            /// };
            /// serde_json::to_vec(&initial_data).map_err(|e| e.to_string())?
            /// }
            /// };
            ///
            /// // Return the new state
            /// Ok((new_state,))
            /// }
            /// }
            /// ```
            ///
            /// ## Security
            ///
            /// This interface is the primary entry point for actor execution. The Theater runtime
            /// ensures that actors can only access resources they have been explicitly granted
            /// through handler configurations.
            ///
            /// ## Implementation Notes
            ///
            /// - The state parameter is passed as a blob of bytes, typically serialized/deserialized
            /// using formats like JSON, MessagePack, or bincode.
            /// - Actors are responsible for managing their own state format and serialization.
            /// - The parameters tuple allows for flexible initialization with a variety of data types.
            /// - Returning an error string from the init function will cause the actor to fail to start.
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod actor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::init(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (_rt::string_lift(bytes1),),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_init<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// # Initialize the actor
                    ///
                    /// Called when the actor is first started or restarted. This function is responsible
                    /// for setting up the actor's initial state and responding to initialization parameters.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - Current state of the actor, or None if first initialization
                    /// * `params` - Tuple of initialization parameters, typically including actor ID
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((state,))` - The updated state to store
                    /// * `Err(string)` - An error message if initialization fails
                    ///
                    /// ## Implementation Notes
                    ///
                    /// - If state is None, the actor should create a new initial state
                    /// - If state contains data, the actor should validate and use that state
                    /// - The first parameter in the tuple is typically the actor's ID
                    /// - Any error returned will cause the actor to fail to start
                    fn init(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String,),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_theater_simple_actor_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "theater:simple/actor#init")] unsafe extern "C" fn
                        export_init(arg0 : i32, arg1 : * mut u8, arg2 : usize, arg3 : *
                        mut u8, arg4 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_init_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/actor#init")] unsafe extern "C" fn
                        _post_return_init(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_init::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_theater_simple_actor_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::alloc;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_default_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::theater::simple::message_server_client::__export_theater_simple_message_server_client_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::theater::simple::message_server_client); $($path_to_types_root)*::
        exports::theater::simple::actor::__export_theater_simple_actor_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::theater::simple::actor);
    };
}
#[doc(inline)]
pub(crate) use __export_default_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:colinrozzi:moonshot-proxy:default:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 4291] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc5\x20\x01A\x02\x01\
A\x1d\x01B<\x01p}\x04\0\x09json-data\x03\0\0\x01s\x04\0\x0eprogress-token\x03\0\x02\
\x01s\x04\0\x06cursor\x03\0\x04\x01s\x04\0\x0arequest-id\x03\0\x06\x01ks\x01k\x01\
\x01r\x03\x04names\x0bdescription\x08\x04meta\x09\x04\0\x0dbase-metadata\x03\0\x0a\
\x01r\x04\x07jsonrpcs\x06methods\x06params\x09\x02id\x07\x04\0\x0fjsonrpc-reques\
t\x03\0\x0c\x01r\x03\x07jsonrpcs\x02id\x07\x06result\x01\x04\0\x10jsonrpc-respon\
se\x03\0\x0e\x01r\x03\x07jsonrpcs\x06methods\x06params\x09\x04\0\x14jsonrpc-noti\
fication\x03\0\x10\x01r\x03\x04codez\x07messages\x04data\x09\x04\0\x0cerror-obje\
ct\x03\0\x12\x01r\x03\x07jsonrpcs\x02id\x07\x05error\x13\x04\0\x0djsonrpc-error\x03\
\0\x14\x01r\x04\x04types\x04texts\x0bannotations\x09\x04meta\x09\x04\0\x0ctext-c\
ontent\x03\0\x16\x01r\x05\x04types\x04datas\x09mime-type\x08\x0bannotations\x09\x04\
meta\x09\x04\0\x0dimage-content\x03\0\x18\x01r\x05\x04types\x04datas\x09mime-typ\
e\x08\x0bannotations\x09\x04meta\x09\x04\0\x0daudio-content\x03\0\x1a\x01kw\x01r\
\x05\x03uris\x09mime-type\x08\x04size\x1c\x0bannotations\x09\x04meta\x09\x04\0\x10\
resource-content\x03\0\x1d\x01r\x06\x04names\x0bdescription\x08\x0cinput-schema\x01\
\x0doutput-schema\x09\x0bannotations\x09\x04meta\x09\x04\0\x04tool\x03\0\x1f\x01\
r\x02\x04names\x09arguments\x01\x04\0\x10tool-call-params\x03\0!\x01r\x06\x04nam\
es\x0bdescription\x08\x03uris\x09mime-type\x08\x0bannotations\x09\x04meta\x09\x04\
\0\x0cmcp-resource\x03\0#\x01k\x17\x01k\x19\x01k\x1b\x01k$\x01q\x05\x04text\x01%\
\0\x05image\x01&\0\x05audio\x01'\0\x08resource\x01\x08\0\x11embedded-resource\x01\
(\0\x04\0\x0ccontent-item\x03\0)\x01p*\x01k\x7f\x01r\x04\x07content+\x12structur\
ed-content\x09\x08is-error,\x04meta\x09\x04\0\x10tool-call-result\x03\0-\x01r\x04\
\x03uris\x09mime-type\x08\x07content*\x04meta\x09\x04\0\x15mcp-resource-contents\
\x03\0/\x01k\x05\x01r\x02\x0bnext-cursor1\x04meta\x09\x04\0\x10paginated-result\x03\
\02\x01p\x20\x01r\x03\x05tools4\x0bnext-cursor1\x04meta\x09\x04\0\x11list-tools-\
result\x03\05\x01p$\x01r\x03\x09resources7\x0bnext-cursor1\x04meta\x09\x04\0\x15\
list-resources-result\x03\08\x01r\x02\x06cursor1\x04meta\x09\x04\0\x11paginated-\
request\x03\0:\x03\0\x1dcolinrozzi:mcp-protocol/types\x05\0\x02\x03\0\0\x04tool\x02\
\x03\0\0\x09json-data\x01B*\x02\x03\x02\x01\x01\x04\0\x04tool\x03\0\0\x02\x03\x02\
\x01\x02\x04\0\x09json-data\x03\0\x02\x01q\x03\x04user\0\0\x09assistant\0\0\x06s\
ystem\0\0\x04\0\x0cmessage-role\x03\0\x04\x01r\x03\x02ids\x04names\x05input\x03\x04\
\0\x08tool-use\x03\0\x06\x01r\x03\x0btool-use-ids\x07content\x03\x08is-error\x7f\
\x04\0\x0btool-result\x03\0\x08\x01q\x03\x04text\x01s\0\x08tool-use\x01\x07\0\x0b\
tool-result\x01\x09\0\x04\0\x0fmessage-content\x03\0\x0a\x01p\x0b\x01r\x02\x04ro\
le\x05\x07content\x0c\x04\0\x07message\x03\0\x0d\x01q\x04\x04auto\0\0\x03any\0\0\
\x04none\0\0\x08specific\x01s\0\x04\0\x0btool-choice\x03\0\x0f\x01p\x0e\x01kv\x01\
ks\x01p\x01\x01k\x14\x01k\x10\x01k\x7f\x01r\x08\x05models\x08messages\x11\x0amax\
-tokensy\x0btemperature\x12\x06system\x13\x05tools\x15\x0btool-choice\x16\x19dis\
able-parallel-tool-use\x17\x04\0\x12completion-request\x03\0\x18\x01q\x05\x08end\
-turn\0\0\x0amax-tokens\0\0\x0dstop-sequence\0\0\x08tool-use\0\0\x05other\x01s\0\
\x04\0\x0bstop-reason\x03\0\x1a\x01r\x02\x0cinput-tokensy\x0doutput-tokensy\x04\0\
\x05usage\x03\0\x1c\x01r\x06\x07content\x0c\x02ids\x05models\x04role\x05\x0bstop\
-reason\x1b\x05usage\x1d\x04\0\x13completion-response\x03\0\x1e\x01r\x02\x0binpu\
t-priceu\x0coutput-priceu\x04\0\x0dmodel-pricing\x03\0\x20\x01k!\x01r\x05\x02ids\
\x0cdisplay-names\x0amax-tokensy\x08providers\x07pricing\"\x04\0\x0amodel-info\x03\
\0#\x01q\x02\x0blist-models\0\0\x13generate-completion\x01\x19\0\x04\0\x0dproxy-\
request\x03\0%\x01p$\x01q\x03\x0blist-models\x01'\0\x0acompletion\x01\x1f\0\x05e\
rror\x01s\0\x04\0\x0eproxy-response\x03\0(\x03\0\x1ccolinrozzi:genai-types/types\
\x05\x03\x01B\x16\x01s\x04\0\x08actor-id\x03\0\0\x01s\x04\0\x0achannel-id\x03\0\x02\
\x01p}\x01k\x04\x01r\x02\x08accepted\x7f\x07message\x05\x04\0\x0echannel-accept\x03\
\0\x06\x01kw\x01r\x03\x0aevent-types\x06parent\x08\x04data\x04\x04\0\x05event\x03\
\0\x09\x01r\x02\x04hashw\x05event\x0a\x04\0\x0ameta-event\x03\0\x0b\x01p\x0c\x01\
r\x01\x06events\x0d\x04\0\x05chain\x03\0\x0e\x01r\x05\x04hash\x04\x0bparent-hash\
\x05\x0aevent-types\x04data\x04\x09timestampw\x04\0\x0bchain-event\x03\0\x10\x01\
m\x09\x11operation-timeout\x0echannel-closed\x0dshutting-down\x12function-not-fo\
und\x0dtype-mismatch\x08internal\x13serialization-error\x16update-component-erro\
r\x06paused\x04\0\x0ewit-error-type\x03\0\x12\x01r\x02\x0aerror-type\x13\x04data\
\x05\x04\0\x0fwit-actor-error\x03\0\x14\x03\0\x14theater:simple/types\x05\x04\x02\
\x03\0\x02\x05chain\x02\x03\0\x02\x08actor-id\x01B\x0d\x02\x03\x02\x01\x05\x04\0\
\x05chain\x03\0\0\x02\x03\x02\x01\x06\x04\0\x08actor-id\x03\0\x02\x01@\x01\x03ms\
gs\x01\0\x04\0\x03log\x01\x04\x01@\0\0\x01\x04\0\x09get-chain\x01\x05\x01p}\x01k\
\x06\x01j\0\x01s\x01@\x01\x04data\x07\0\x08\x04\0\x08shutdown\x01\x09\x03\0\x16t\
heater:simple/runtime\x05\x07\x01B\x09\x01ks\x01@\x01\x04names\0\0\x04\0\x07get-\
var\x01\x01\x01o\x02ss\x01p\x02\x01@\0\0\x03\x04\0\x09list-vars\x01\x04\x01@\x01\
\x04names\0\x7f\x04\0\x06exists\x01\x05\x03\0\x1atheater:simple/environment\x05\x08\
\x01B\x07\x01@\0\0w\x04\0\x03now\x01\0\x01j\0\x01s\x01@\x01\x08durationw\0\x01\x04\
\0\x05sleep\x01\x02\x01@\x01\x09timestampw\0\x01\x04\0\x08deadline\x01\x03\x03\0\
\x15theater:simple/timing\x05\x09\x01B\x14\x01p}\x04\0\x05bytes\x03\0\0\x01o\x02\
ss\x01p\x02\x01k\x01\x01r\x04\x06methods\x03uris\x07headers\x03\x04body\x04\x04\0\
\x0chttp-request\x03\0\x05\x01r\x03\x06status{\x07headers\x03\x04body\x04\x04\0\x0d\
http-response\x03\0\x07\x01r\x02\x09cert-paths\x08key-paths\x04\0\x0atls-config\x03\
\0\x09\x01k{\x01ks\x01k\x0a\x01r\x03\x04port\x0b\x04host\x0c\x0atls-config\x0d\x04\
\0\x0dserver-config\x03\0\x0e\x01r\x07\x02idw\x04port{\x04hosts\x07running\x7f\x0c\
routes-county\x10middleware-county\x11websocket-enabled\x7f\x04\0\x0bserver-info\
\x03\0\x10\x01r\x02\x07proceed\x7f\x07request\x06\x04\0\x11middleware-result\x03\
\0\x12\x03\0\x19theater:simple/http-types\x05\x0a\x02\x03\0\x06\x0chttp-request\x02\
\x03\0\x06\x0dhttp-response\x01B\x07\x02\x03\x02\x01\x0b\x04\0\x0chttp-request\x03\
\0\0\x02\x03\x02\x01\x0c\x04\0\x0dhttp-response\x03\0\x02\x01j\x01\x03\x01s\x01@\
\x01\x03req\x01\0\x04\x04\0\x09send-http\x01\x05\x03\0\x1atheater:simple/http-cl\
ient\x05\x0d\x02\x03\0\x02\x05event\x02\x03\0\x02\x0achannel-id\x02\x03\0\x02\x0e\
channel-accept\x01B\x1d\x02\x03\x02\x01\x0e\x04\0\x05event\x03\0\0\x02\x03\x02\x01\
\x0f\x04\0\x0achannel-id\x03\0\x02\x02\x03\x02\x01\x10\x04\0\x0echannel-accept\x03\
\0\x04\x01p}\x01k\x06\x01o\x01\x06\x01o\x01\x07\x01j\x01\x09\x01s\x01@\x02\x05st\
ate\x07\x06params\x08\0\x0a\x04\0\x0bhandle-send\x01\x0b\x01o\x02s\x06\x01o\x02\x07\
\x09\x01j\x01\x0d\x01s\x01@\x02\x05state\x07\x06params\x0c\0\x0e\x04\0\x0ehandle\
-request\x01\x0f\x01o\x01\x05\x01o\x02\x07\x10\x01j\x01\x11\x01s\x01@\x02\x05sta\
te\x07\x06params\x0c\0\x12\x04\0\x13handle-channel-open\x01\x13\x01o\x02\x03\x06\
\x01@\x02\x05state\x07\x06params\x14\0\x0a\x04\0\x16handle-channel-message\x01\x15\
\x01o\x01\x03\x01@\x02\x05state\x07\x06params\x16\0\x0a\x04\0\x14handle-channel-\
close\x01\x17\x04\0$theater:simple/message-server-client\x05\x11\x01B\x07\x01p}\x01\
k\0\x01o\x01s\x01o\x01\x01\x01j\x01\x03\x01s\x01@\x02\x05state\x01\x06params\x02\
\0\x04\x04\0\x04init\x01\x05\x04\0\x14theater:simple/actor\x05\x12\x04\0!colinro\
zzi:moonshot-proxy/default\x04\0\x0b\x0d\x01\0\x07default\x03\0\0\0G\x09producer\
s\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.4\
1.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
