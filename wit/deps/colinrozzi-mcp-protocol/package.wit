package colinrozzi:mcp-protocol;

interface types {
  type json-data = list<u8>;

  type progress-token = string;

  type cursor = string;

  type request-id = string;

  record base-metadata {
    name: string,
    description: option<string>,
    meta: option<json-data>,
  }

  record jsonrpc-request {
    jsonrpc: string,
    method: string,
    params: option<json-data>,
    id: request-id,
  }

  record jsonrpc-response {
    jsonrpc: string,
    id: request-id,
    %result: json-data,
  }

  record jsonrpc-notification {
    jsonrpc: string,
    method: string,
    params: option<json-data>,
  }

  record error-object {
    code: s32,
    message: string,
    data: option<json-data>,
  }

  record jsonrpc-error {
    jsonrpc: string,
    id: request-id,
    error: error-object,
  }

  record text-content {
    %type: string,
    text: string,
    annotations: option<json-data>,
    meta: option<json-data>,
  }

  record image-content {
    %type: string,
    data: string,
    mime-type: option<string>,
    annotations: option<json-data>,
    meta: option<json-data>,
  }

  record audio-content {
    %type: string,
    data: string,
    mime-type: option<string>,
    annotations: option<json-data>,
    meta: option<json-data>,
  }

  record resource-content {
    uri: string,
    mime-type: option<string>,
    size: option<u64>,
    annotations: option<json-data>,
    meta: option<json-data>,
  }

  record tool {
    name: string,
    description: option<string>,
    input-schema: json-data,
    output-schema: option<json-data>,
    annotations: option<json-data>,
    meta: option<json-data>,
  }

  record tool-call-params {
    name: string,
    arguments: json-data,
  }

  record mcp-resource {
    name: string,
    description: option<string>,
    uri: string,
    mime-type: option<string>,
    annotations: option<json-data>,
    meta: option<json-data>,
  }

  variant content-item {
    text(option<text-content>),
    image(option<image-content>),
    audio(option<audio-content>),
    %resource(option<string>),
    embedded-resource(option<mcp-resource>),
  }

  record tool-call-result {
    content: list<content-item>,
    structured-content: option<json-data>,
    is-error: option<bool>,
    meta: option<json-data>,
  }

  record mcp-resource-contents {
    uri: string,
    mime-type: option<string>,
    content: content-item,
    meta: option<json-data>,
  }

  record paginated-result {
    next-cursor: option<cursor>,
    meta: option<json-data>,
  }

  record list-tools-result {
    tools: list<tool>,
    next-cursor: option<cursor>,
    meta: option<json-data>,
  }

  record list-resources-result {
    resources: list<mcp-resource>,
    next-cursor: option<cursor>,
    meta: option<json-data>,
  }

  record paginated-request {
    cursor: option<cursor>,
    meta: option<json-data>,
  }
}

